
export interface NavItem {
  title: string;
  href?: string;
  disabled?: boolean;
  external?: boolean;
  icon?: React.ElementType;
  label?: string;
  description?: string;
}

// --- User and Auth Related Types ---
export type UserRole = "Owner" | "Admin" | "Editor" | "Viewer";

export interface AppUser { // Corresponds to 'users' collection
  id: string; // Firebase Auth UID
  email: string;
  name?: string;
  role: UserRole; // Default/Primary role in the system or a team
  teamId?: string; // ID of the primary team/account they belong to
  linkedAccountId?: string; // For multi-user access under one account
  avatarUrl?: string;
  initials?: string;
  joinedDate?: string; // ISO date string
}

export type InviteStatus = "pending" | "accepted" | "expired" | "declined";

export interface Invite { // Corresponds to 'invites' collection for TEAM invitations
  id: string; // Firestore document ID
  inviterId: string; // UID of the user who sent the invite
  inviteeEmail: string; // Email of the invited user
  // formId is removed as this invite is for general team membership, not a specific form.
  // Per-form access will be managed by FormSchema.access.
  role: Exclude<UserRole, "Owner">; // Team-level role to be assigned upon acceptance
  status: InviteStatus;
  token: string; // Unique token for accepting the invite (generated by backend)
  createdAt: string; // ISO date string
  expiresAt?: string; // ISO date string, optional
  teamId?: string; // Optional: If invites are also related to a broader team context
}


// --- Survey and Response Related Types ---
export interface FormFieldOption {
  label: string;
  value: string;
}

export type FormFieldType =
  | "text"
  | "textarea"
  | "select"
  | "radio"
  | "checkbox"
  | "rating" // e.g., 1-5 stars
  | "date"
  | "email"
  | "number"
  | "nps" // Net Promoter Score (0-10 rating)
  | "pagebreak"; // Added pagebreak type based on existing form builder

export interface QuestionSchema { // Represents a field within a survey's 'fields' array
  id: string; // Unique ID for the question/field
  surveyId: string; // ID of the survey this question belongs to
  section?: string; // For multi-section surveys
  text: string; // The question label or text
  type: FormFieldType;
  options?: FormFieldOption[];
  required?: boolean;
  placeholder?: string;
  description?: string; // Helper text
  minRating?: number; // For rating type
  maxRating?: number; // For rating type
  aiFollowUpEnabled?: boolean;
}

export interface FormSchema { // Corresponds to 'surveys' collection (was 'forms' in prompt)
  id: string; // Firestore document ID
  title: string;
  description?: string;
  fields: QuestionSchema[];
  createdBy: string; // UID of the user who created the survey (implicitly the "Owner" of this form)
  createdAt: string; // ISO date string
  updatedAt: string; // ISO date string
  isAnonymous: boolean;
  aiMode?: "dynamic" | "assisted_creation" | "none";
  teamId?: string; // Optional: If forms belong to a team account structure.
  access?: { // Per-form access control
    [userId: string]: Exclude<UserRole, "Owner">; // Users can be Admin, Editor, Viewer on this specific form.
  };
}

// This is an alias for compatibility with current form builder, can be deprecated later
export type FormFieldSchema = QuestionSchema;

export interface FormResponse { // Corresponds to 'responses' collection
  id: string; // Firestore document ID
  userId?: string; // UID of the respondent (if not anonymous)
  surveyId: string; // Consistent with QuestionSchema
  answers: Record<string, any>; // Key is questionId (field.id), value is the answer
  sentiment?: Record<string, number | string>;
  timestamp: string; // ISO date string of submission
}
