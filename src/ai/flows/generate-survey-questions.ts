
// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview This file defines a Genkit flow for generating survey questions based on a user-provided topic
 * or by parsing user-provided text that may already contain questions and options.
 *
 * The flow takes a topic/text as input and returns a list of suggested survey questions,
 * including question types and options where appropriate.
 * It exports:
 *   - generateSurveyQuestions: An async function that triggers the survey question generation flow.
 *   - GenerateSurveyQuestionsInput: The TypeScript type definition for the input to the flow.
 *   - GenerateSurveyQuestionsOutput: The TypeScript type definition for the output of the flow.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';
import type { FormFieldType } from '@/types'; // Ensure this path is correct

// Define the schema for an option within a question
const QuestionOptionSchema = z.object({
  label: z.string().describe("The display label for the option."),
  value: z.string().describe("The unique value for the option (e.g., a slugified, lowercase version of the label).")
});

// Define the schema for a suggested question
const SuggestedQuestionSchema = z.object({
  label: z.string().describe("The text of the question."),
  type: z.enum(["text", "textarea", "select", "radio", "checkbox", "rating"])
    .describe("The type of the question field. E.g., 'text', 'radio', 'checkbox', 'rating' (1-5 stars)."),
  options: z.array(QuestionOptionSchema).optional()
    .describe("An array of options for 'select', 'radio', or 'checkbox' type questions. Should provide 3-5 options if applicable. Not used for 'text', 'textarea', or 'rating' types unless explicitly provided in user input.")
});

export type SuggestedQuestion = z.infer<typeof SuggestedQuestionSchema>;

// Define the schema for the input to the flow.
const GenerateSurveyQuestionsInputSchema = z.object({
  topic: z.string().describe('The topic for which to generate survey questions, or text containing questions and options to parse.'),
});

export type GenerateSurveyQuestionsInput = z.infer<
  typeof GenerateSurveyQuestionsInputSchema
>;

// Define the schema for the output of the flow.
const GenerateSurveyQuestionsOutputSchema = z.object({
  questions: z
    .array(SuggestedQuestionSchema)
    .describe('An array of suggested survey questions, including types and options where appropriate.'),
});

export type GenerateSurveyQuestionsOutput = z.infer<
  typeof GenerateSurveyQuestionsOutputSchema
>;

// Exported function to trigger the flow.
export async function generateSurveyQuestions(
  input: GenerateSurveyQuestionsInput
): Promise<GenerateSurveyQuestionsOutput> {
  return generateSurveyQuestionsFlow(input);
}

// Define the prompt for generating survey questions.
const generateSurveyQuestionsPrompt = ai.definePrompt({
  name: 'generateSurveyQuestionsPrompt',
  input: {schema: GenerateSurveyQuestionsInputSchema},
  output: {schema: GenerateSurveyQuestionsOutputSchema},
  prompt: `You are an expert survey question generator and parser.
Given an input text, which could be a general topic or a list of questions (potentially with options), you will generate a list of structured survey questions.

Your output MUST be a JSON object. This object should contain a "questions" key, which is an array of question objects.
Each question object MUST adhere to the structure detailed in the instructions and examples below (including 'label', 'type', and 'options' where appropriate).

Instructions:

1.  **Analyze Input**:
    *   If the input text appears to be a general topic (e.g., "customer satisfaction", "employee feedback about company culture"), generate 3-5 relevant survey questions.
    *   If the input text itself seems to list specific questions, and potentially options for them (e.g., "1. What's your favorite color? (Red, Blue, Green)", "Rate our service: (Poor, Fair, Good, Excellent)"), parse these questions and their options into the structured format.

2.  **Question Structure**:
    *   For each question, you MUST provide a 'label' (the question text).
    *   For each question, you MUST determine and specify a 'type' from the allowed list: "text", "textarea", "select", "radio", "checkbox", "rating".

3.  **Options Generation/Parsing**:
    *   If the question type is "select", "radio", or "checkbox", you MUST provide an array of 3 to 5 'options', unless options are explicitly provided in the input text for parsing.
    *   Each option MUST have a 'label' (for display) and a 'value' (a unique identifier, typically a lowercase, hyphenated version of the label, or the parsed value).
    *   For "text", "textarea", and "rating" types, do NOT generate options unless they are explicitly part of a question to be parsed from the input. A "rating" type implies a numerical scale (e.g., 1-5 stars) and generally does not require explicit options in the output structure, unless specified in the input to be parsed.

4.  **Example of a generated question with options (for topic "Favorite Season")**:
    \`\`\`json
    {
      "label": "What is your favorite season?",
      "type": "radio",
      "options": [
        { "label": "Spring", "value": "spring" },
        { "label": "Summer", "value": "summer" },
        { "label": "Autumn", "value": "autumn" },
        { "label": "Winter", "value": "winter" }
      ]
    }
    \`\`\`

5.  **Example of parsing input**:
    If input is "Question 1: Your primary device? (Phone; Tablet; Laptop). Question 2: Your age range?", you should parse "Your primary device?" as a 'radio' or 'select' with the given options, and "Your age range?" likely as a 'text' or 'number' (though 'number' is not in the primary generation types, parse as 'text' if unsure).

Input Topic/Text:
{{{topic}}}

Structured Survey Questions (JSON):
`,
});

// Define the Genkit flow.
const generateSurveyQuestionsFlow = ai.defineFlow(
  {
    name: 'generateSurveyQuestionsFlow',
    inputSchema: GenerateSurveyQuestionsInputSchema,
    outputSchema: GenerateSurveyQuestionsOutputSchema,
  },
  async input => {
    const {output} = await generateSurveyQuestionsPrompt(input);
    if (!output) {
        // Handle the case where output is null or undefined, perhaps return an empty array or throw an error
        console.error('AI did not return an output for generateSurveyQuestionsPrompt.');
        return { questions: [] };
    }
    return output;
  }
);

